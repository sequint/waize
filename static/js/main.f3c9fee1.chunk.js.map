{"version":3,"sources":["components/CapturedPhoto/capturedPhotoSlice.ts","components/Camera/averageColorSlice.ts","components/Camera/intervalSlice.ts","app/store.ts","components/About/About.tsx","app/hooks.ts","components/Camera/Camera.tsx","hooks/useUserMedia.ts","components/ColorGrid/ColorGrid.tsx","components/HomeTitle/HomeTitle.tsx","images/dashboardWave.jpeg","images/dashboardWaveSmall.png","components/HomeWavePic/HomeWavePic.tsx","components/NavBar/NavBar.tsx","pages/Home.tsx","pages/Waize.tsx","app/App.tsx","index.tsx"],"names":["capturedPhotoSlice","createSlice","name","initialState","open","photoURL","reducers","togglePhotoView","state","updatePhotoURL","url","payload","console","log","actions","averageColorSlice","color","updateAverageColor","newColor","selectAverageColor","averageColor","intervalSlice","id","updateInterval","intervalId","selectInterval","interval","store","configureStore","reducer","capturedPhoto","capturedPhotoReducer","averageColorReducer","intervalReducer","aboutSections","icon","title","text","About","className","List","sx","width","maxWidth","bgcolor","map","item","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","useAppDispatch","useDispatch","useAppSelector","useSelector","videoConstraints","audio","video","facingMode","screenWidth","window","innerWidth","Camera","dispatch","videoRef","useRef","mediaStream","requestedMedia","useState","setMediaStream","useEffect","enableStream","a","navigator","mediaDevices","getUserMedia","stream","getTracks","forEach","track","stop","useUserMedia","canvasRef","canvas","current","srcObject","createCanvasFromStream","setInterval","context","getContext","drawImage","colors","data","totalColors","rgbRed","rgbGreen","rgbBlue","index","length","Math","floor","getAverageColor","getImageData","ref","onCanPlay","play","autoPlay","playsInline","muted","ColorGrid","HomeTitle","HomeWavePic","src","wavePic","alt","wavePicSmall","NavBar","props","value","setValue","definedRoute","clearInterval","updateIconClass","Box","BottomNavigation","showLabels","onChange","event","newValue","to","BottomNavigationAction","label","Home","Waize","App","exact","path","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.f3c9fee1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n// Define state types for CapturedPhoto\ninterface CapturedPhotoState {\n  open: boolean,\n  photoURL: String\n}\n\n// Initialize state values\nconst initialState: CapturedPhotoState = {\n  open: false,\n  photoURL: ''\n}\n\nexport const capturedPhotoSlice = createSlice({\n  name: 'capturedPhoto',\n  initialState,\n  reducers: {\n    // Slice function to toggle the modal view based on payload\n    togglePhotoView: (state: any) => {\n      state.open = !state.open\n    },\n    updatePhotoURL: (state: any, url: any) => {\n      state.photoURL = url.payload\n      console.log(state.photoURL)\n    },\n  },\n})\n\n// Export the actions for this slice\nexport const { togglePhotoView, updatePhotoURL } = capturedPhotoSlice.actions\n\n// Export state values\nexport const selectPhotoView = (state: any) => state.capturedPhoto.open\nexport const selectPhotoURL = (state: any) => state.capturedPhoto.photoURL\n\n// Export the default slice reducer\nexport default capturedPhotoSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\n\n// Define state types for CapturedPhoto\ninterface AverageColorState {\n  color: number\n}\n\n// Initialize state values\nconst initialState: AverageColorState = {\n  color: 0\n}\n\nexport const averageColorSlice = createSlice({\n  name: 'averageColor',\n  initialState,\n  reducers: {\n    updateAverageColor: (state: any, newColor: any) => {\n      state.color = newColor.payload\n    },\n  },\n})\n\n// Export the actions for this slice\nexport const { updateAverageColor } = averageColorSlice.actions\n\n// Export state values\nexport const selectAverageColor = (state: RootState) => state.averageColor.color\n\n// Export the default slice reducer\nexport default averageColorSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\n\n// Define state types for CapturedPhoto\ninterface IntervalState {\n  id: number\n}\n\n// Initialize state values\nconst initialState: IntervalState = {\n  id: 0\n}\n\nexport const intervalSlice = createSlice({\n  name: 'interval',\n  initialState,\n  reducers: {\n    updateInterval: (state: any, intervalId: any) => {\n      state.id = intervalId.payload\n    },\n  },\n})\n\n// Export the actions for this slice\nexport const { updateInterval } = intervalSlice.actions\n\n// Export state values\nexport const selectInterval = (state: RootState) => state.interval.id\n\n// Export the default slice reducer\nexport default intervalSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport capturedPhotoReducer from '../components/CapturedPhoto/capturedPhotoSlice'\nimport averageColorReducer from '../components/Camera/averageColorSlice'\nimport intervalReducer from '../components/Camera/intervalSlice'\n\n\nexport const store = configureStore({\n  reducer: {\n    capturedPhoto: capturedPhotoReducer,\n    averageColor: averageColorReducer,\n    interval: intervalReducer\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n","import List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\nimport ListItemText from '@mui/material/ListItemText'\nimport WavesRoundedIcon from '@mui/icons-material/WavesRounded'\nimport SquareFootRoundedIcon from '@mui/icons-material/SquareFootRounded'\nimport Avatar from '@mui/material/Avatar'\nimport './About.css'\n\nconst aboutSections = [\n  {\n    icon: <WavesRoundedIcon />,\n    title: 'Wave Detection',\n    text: 'Waize uses pixl technology to analyze pictures in real time and detect waves that are forming.'\n  },\n  {\n    icon: <SquareFootRoundedIcon />,\n    title: 'Wave Size',\n    text: 'Using the wave detection technology, Waize will analyze what it deems the face of a wave compared to its surroundings and predict in real time its size.'\n  }\n]\n\nconst About = () => {\n  return (\n    <>\n      <h2 className=\"aboutTitle\">What It Does</h2>\n      <List className=\"aboutList\" sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n        {\n          aboutSections.map(item => (\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"iconColor\">\n                  {item.icon}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={item.title} secondary={item.text} />\n            </ListItem>\n          ))\n        }\n      </List>\n    </>\n  )\n}\n\nexport default About\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Specify appDispatch and appSelector to the app\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { useRef } from 'react'\nimport { useUserMedia } from '../../hooks'\nimport { useAppDispatch } from '../../app/hooks'\nimport { updateAverageColor } from './averageColorSlice'\nimport { updateInterval } from './intervalSlice'\nimport './Camera.css'\n\n// Set constraints for video stream from user midea data (switch to environment facing after testing)\nconst videoConstraints = {\n  audio: false,\n  video: { facingMode: 'environment' }\n}\n\nconst screenWidth = window.innerWidth\n\nconst Camera = () => {\n  const dispatch = useAppDispatch()\n\n  // Create a video element using ref\n  const videoRef: any = useRef()\n  const mediaStream = useUserMedia(videoConstraints)\n  const canvasRef: any = useRef()\n  const canvas = canvasRef.current\n\n  // If there is a video stream live, a video element set, and no src on the object\n  // then set a src equal to the mediaStream\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream\n  }\n\n  const getAverageColor = (colors: any) => {\n    console.log(colors.data)\n    // Initialize rbg values\n    let totalColors = 0\n    let rgbRed = 0\n    let rgbGreen = 0\n    let rgbBlue = 0\n\n    // Create a for loop that iterates through every fourth position of the colors array\n    for (let index = 0; index < colors.data.length; index += 4) {\n      // Sum all values of red color\n      rgbRed += colors.data[index]\n\n      // Sum all values of green color\n      rgbGreen += colors.data[index + 1]\n\n      // Sum all values of blue color\n      rgbBlue += colors.data[index + 2]\n\n      // Increment the total number of values of rgb colors\n      totalColors++\n    }\n\n    rgbRed = Math.floor(rgbRed / totalColors)\n    rgbGreen = Math.floor(rgbGreen / totalColors)\n    rgbBlue = Math.floor(rgbBlue / totalColors)\n\n    // Update average color state\n    dispatch(updateAverageColor(rgbBlue))\n\n  }\n\n  const createCanvasFromStream = () => {\n    const interval = setInterval(() => {\n      const context = canvas.getContext('2d')\n      context.drawImage(videoRef.current, 0, 0, screenWidth, screenWidth * .40)\n      getAverageColor(context.getImageData(0, 0, screenWidth, screenWidth * .40))\n    }, 1000)\n    dispatch(updateInterval(interval))\n  }\n\n  // Plays video stream to handle canPlay prop of video element\n  // and create the canvas stream\n  const handleCanPlay = () => {\n    videoRef.current.play()\n    createCanvasFromStream()\n  }\n\n  return (\n    <>\n      <video\n        ref={videoRef}\n        onCanPlay={handleCanPlay}\n        className=\"streamScreen\"\n        autoPlay\n        playsInline\n        muted\n      />\n      <canvas\n        ref={canvasRef}\n        className=\"canvasStyle\"\n      />\n    </>\n  )\n}\n\nexport default Camera\n","import { useState, useEffect } from 'react'\n\nexport const useUserMedia: any = (requestedMedia: any) => {\n  const [mediaStream, setMediaStream] = useState<any>(null)\n\n  useEffect(() => {\n    const enableStream: any = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(requestedMedia);\n        setMediaStream(stream);\n      }\n      catch (err) { console.log(err) }\n    }\n\n    if (!mediaStream) {\n      enableStream();\n    } else {\n      return function cleanup() {\n        mediaStream.getTracks().forEach((track: { stop: () => void }) => {\n          track.stop()\n        })\n      }\n    }\n  }, [mediaStream, requestedMedia])\n\n  return mediaStream\n}\n","import { useAppSelector } from '../../app/hooks'\nimport { selectAverageColor } from '../Camera/averageColorSlice'\nimport './ColorGrid.css'\n\nconst ColorGrid = () => {\n  const averageColor = useAppSelector(selectAverageColor)\n  console.log(averageColor)\n\n  const oceanNotOcean: any = () => {\n    // return <h1 className=\"colorText\">{averageColor}</h1>\n    if (averageColor >= 120 && averageColor <= 225) {\n      return <h1 className=\"colorText\">You might be looking at an ocean</h1>\n    }\n    else {\n      return <h1 className=\"colorText\">Point camera to the ocean</h1>\n    }\n  }\n\n  return (\n    <div className=\"grid\">\n      {oceanNotOcean()}\n    </div>\n  )\n}\n\nexport default ColorGrid\n","import './HomeTitle.css'\n\nconst HomeTitle = () => {\n  return (\n    <>\n      <h1 className=\"homeTitle\">Waize</h1>\n    </>\n  )\n}\n\nexport default HomeTitle\n","export default __webpack_public_path__ + \"static/media/dashboardWave.980ac552.jpeg\";","export default __webpack_public_path__ + \"static/media/dashboardWaveSmall.74d48754.png\";","import wavePic from '../../images/dashboardWave.jpeg'\nimport wavePicSmall from '../../images/dashboardWaveSmall.png'\nimport './HomeWavePic.css'\n\nconst HomeWavePic = () => {\n\n  return (\n    <>\n      <img src={wavePic} alt=\"waves with waize generator\" className=\"homeWavePic largePic\" />\n      <img src={wavePicSmall} alt=\"waves with waize generator\" className=\"homeWavePic smallPic\" />\n    </>\n  )\n}\n\nexport default HomeWavePic\n","import { useState } from 'react'\nimport { useAppSelector } from '../../app/hooks'\nimport { selectInterval } from '../Camera/intervalSlice'\nimport { Link } from 'react-router-dom'\nimport Box from '@mui/material/Box'\nimport BottomNavigation from '@mui/material/BottomNavigation'\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction'\nimport CottageRounded from '@mui/icons-material/CottageRounded'\nimport WavesRoundedIcon from '@mui/icons-material/WavesRounded'\nimport './NavBar.css'\n\n// Typescript interface to define prop type for the defined route in NavBar\ninterface navbar {\n  definedRoute: String\n}\n\nconst NavBar: React.FC<navbar> = (props) => {\n  const interval = useAppSelector(selectInterval)\n  const [value, setValue] = useState(0)\n\n  if (props.definedRoute === 'waize') { clearInterval(interval)}\n\n  const updateIconClass = (icon: String) => {\n    // Return a class string depending on the icon and definedRoute\n    switch(icon) {\n      case 'waize':\n        if (props.definedRoute === 'waize') { return 'activeLinkIcon' }\n        else { return 'inactiveLinkIcon' }\n      case 'waizeVR':\n        return props.definedRoute === 'waizeVR' ? 'activeLinkIcon' : 'inactiveLinkIcon'\n      default:\n        return 'inactiveLinkIcon'\n    }\n  }\n\n  return (\n    <Box className=\"navBarHolder\">\n      <BottomNavigation\n        showLabels\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue)\n        }}\n      >\n        <Link to='/waize'>\n          <BottomNavigationAction className={updateIconClass('waize')} label=\"Home\" icon={<CottageRounded />} />\n        </Link>\n        <Link to='/waizeVR'>\n          <BottomNavigationAction className={updateIconClass('waizeVR')} label=\"Waize\" icon={<WavesRoundedIcon />} />\n        </Link>\n        \n      </BottomNavigation>\n    </Box>\n  )\n}\n\nexport default NavBar\n","import {\n  HomeTitle,\n  HomeWavePic,\n  About,\n  NavBar\n} from '../components'\n\nconst Home = () => {\n\n  return (\n    <>\n      <HomeTitle />\n      <HomeWavePic />\n      <About />\n      <NavBar definedRoute='waize'/>\n    </>\n  )\n}\n\nexport default Home\n","import {\n  Camera,\n  ColorGrid,\n  NavBar\n} from '../components'\n\nconst Waize = () => {\n  return (\n    <>\n      <Camera />\n      <ColorGrid />\n      <NavBar definedRoute='waizeVR' />\n    </>\n  )\n}\n\nexport default Waize\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport Home from '../pages/Home'\nimport Waize from '../pages/Waize'\nimport './App.css'\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path='/waize'>\n            <Home />\n          </Route>\n          <Route path='/waizeVR'>\n            <Waize />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport { Provider } from 'react-redux'\nimport {store} from './app/store'\nimport App from './app/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}